
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/plot_milling.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__auto_examples_plot_milling.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_plot_milling.py:


.. _examplemill:

Mills
============================================

Examples of milling behaviours. 

.. GENERATED FROM PYTHON SOURCE LINES 12-13

First of all, some standard imports. 

.. GENERATED FROM PYTHON SOURCE LINES 13-28

.. code-block:: default


    import os
    import sys
    import time
    import math
    import torch
    import numpy as np 
    from matplotlib import pyplot as plt
    import sisyphe.models as models
    from sisyphe.display import display_kinetic_particles

    use_cuda = torch.cuda.is_available()
    dtype = torch.cuda.FloatTensor if use_cuda else torch.FloatTensor









.. GENERATED FROM PYTHON SOURCE LINES 29-53

Milling in the D'Orsogna et al. model
-----------------------------------------

Let us create an instance of the attraction-repulsion model introduced in

M. R. Dâ€™Orsogna, Y. L. Chuang, A. L. Bertozzi, L. S. Chayes, Self-Propelled Particles with Soft-Core Interactions: Patterns, Stability, and Collapse, *Phys. Rev. Lett.*, Vol. 96, No. 10 (2006).

The particle system satisfies the ODE:

.. math::  

        \frac{\mathrm{d}X^i_t}{\mathrm{d}t} = V^i_t

.. math::

         \frac{\mathrm{d}V^i_t}{\mathrm{d}t} = (\alpha-\beta|V^i_t|^2)V^i_t - \frac{m}{N}\nabla_{x^i}\sum_{j\ne i} U(|X^i_t-X^j_t|)

where :math:`U` is the Morse potential 

.. math::

       U(r) := -C_a\mathrm{e}^{-r/\ell_a}+C_r\mathrm{e}^{-r/\ell_r}



.. GENERATED FROM PYTHON SOURCE LINES 53-89

.. code-block:: default



    N = 10000
    mass = 1000.
    L = 10. 

    Ca = .5
    la = 2.
    Cr = 1.
    lr = .5

    alpha = 1.6
    beta = .5
    v0 = math.sqrt(alpha/beta)

    pos = L*torch.rand((N,2)).type(dtype)
    vel = torch.randn(N,2).type(dtype)
    vel = vel/torch.norm(vel,dim=1).reshape((N,1))
    vel = v0*vel

    dt = .01

    simu = models.AttractionRepulsion(pos=pos,
                     vel=vel,
                     interaction_radius=math.sqrt(mass),
                     box_size=L,
                     propulsion = alpha,
                     friction = beta,                        
                     Ca = Ca,
                     la = la,
                     Cr = Cr,
                     lr = lr,                        
                     dt=dt,
                     p=1,                        
                     isaverage=True)








.. GENERATED FROM PYTHON SOURCE LINES 90-92

Run the simulation over 100 units of time and plot 10 frames. The ODE system is solved using the Runge-Kutta 4 numerical scheme. 


.. GENERATED FROM PYTHON SOURCE LINES 92-99

.. code-block:: default


    frames = [0,1,2,3,4,5,10,40,70,100]

    s = time.time()
    it, op = display_kinetic_particles(simu,frames)
    e = time.time()




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_001.png
          :alt: Self-propulsion and Attraction-Repulsion  Parameters: N=10000 ; alpha=1.6 ; beta=0.5 ; Ca=0.5 ; la=2.0 ; Cr=1.0 ; lr=0.5  Time=0.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_002.png
          :alt: Self-propulsion and Attraction-Repulsion  Parameters: N=10000 ; alpha=1.6 ; beta=0.5 ; Ca=0.5 ; la=2.0 ; Cr=1.0 ; lr=0.5  Time=1.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_003.png
          :alt: Self-propulsion and Attraction-Repulsion  Parameters: N=10000 ; alpha=1.6 ; beta=0.5 ; Ca=0.5 ; la=2.0 ; Cr=1.0 ; lr=0.5  Time=2.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_004.png
          :alt: Self-propulsion and Attraction-Repulsion  Parameters: N=10000 ; alpha=1.6 ; beta=0.5 ; Ca=0.5 ; la=2.0 ; Cr=1.0 ; lr=0.5  Time=3.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_005.png
          :alt: Self-propulsion and Attraction-Repulsion  Parameters: N=10000 ; alpha=1.6 ; beta=0.5 ; Ca=0.5 ; la=2.0 ; Cr=1.0 ; lr=0.5  Time=4.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_006.png
          :alt: Self-propulsion and Attraction-Repulsion  Parameters: N=10000 ; alpha=1.6 ; beta=0.5 ; Ca=0.5 ; la=2.0 ; Cr=1.0 ; lr=0.5  Time=5.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_007.png
          :alt: Self-propulsion and Attraction-Repulsion  Parameters: N=10000 ; alpha=1.6 ; beta=0.5 ; Ca=0.5 ; la=2.0 ; Cr=1.0 ; lr=0.5  Time=10.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_008.png
          :alt: Self-propulsion and Attraction-Repulsion  Parameters: N=10000 ; alpha=1.6 ; beta=0.5 ; Ca=0.5 ; la=2.0 ; Cr=1.0 ; lr=0.5  Time=40.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_009.png
          :alt: Self-propulsion and Attraction-Repulsion  Parameters: N=10000 ; alpha=1.6 ; beta=0.5 ; Ca=0.5 ; la=2.0 ; Cr=1.0 ; lr=0.5  Time=70.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_010.png
          :alt: Self-propulsion and Attraction-Repulsion  Parameters: N=10000 ; alpha=1.6 ; beta=0.5 ; Ca=0.5 ; la=2.0 ; Cr=1.0 ; lr=0.5  Time=100.0
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Progress:0%    Progress:1%    Progress:2%    Progress:3%    Progress:4%    Progress:5%    Progress:6%    Progress:7%    Progress:8%    Progress:9%    Progress:10%    Progress:11%    Progress:12%    Progress:13%    Progress:14%    Progress:15%    Progress:16%    Progress:17%    Progress:18%    Progress:19%    Progress:20%    Progress:21%    Progress:22%    Progress:23%    Progress:24%    Progress:25%    Progress:26%    Progress:27%    Progress:28%    Progress:29%    Progress:30%    Progress:31%    Progress:32%    Progress:33%    Progress:34%    Progress:35%    Progress:36%    Progress:37%    Progress:38%    Progress:39%    Progress:40%    Progress:41%    Progress:42%    Progress:43%    Progress:44%    Progress:45%    Progress:46%    Progress:47%    Progress:48%    Progress:49%    Progress:50%    Progress:51%    Progress:52%    Progress:53%    Progress:54%    Progress:55%    Progress:56%    Progress:57%    Progress:58%    Progress:59%    Progress:60%    Progress:61%    Progress:62%    Progress:63%    Progress:64%    Progress:65%    Progress:66%    Progress:67%    Progress:68%    Progress:69%    Progress:70%    Progress:71%    Progress:72%    Progress:73%    Progress:74%    Progress:75%    Progress:76%    Progress:77%    Progress:78%    Progress:79%    Progress:80%    Progress:81%    Progress:82%    Progress:83%    Progress:84%    Progress:85%    Progress:86%    Progress:87%    Progress:88%    Progress:89%    Progress:90%    Progress:91%    Progress:92%    Progress:93%    Progress:94%    Progress:95%    Progress:96%    Progress:97%    Progress:98%    Progress:99%



.. GENERATED FROM PYTHON SOURCE LINES 100-101

Print the total simulation time and the average time per iteration. 

.. GENERATED FROM PYTHON SOURCE LINES 101-107

.. code-block:: default


    print('Total time: '+str(e-s)+' seconds')
    print('Average time per iteration: '+str((e-s)/simu.iteration)+' seconds')







.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Total time: 86.00608777999878 seconds
    Average time per iteration: 0.008600608777999877 seconds




.. GENERATED FROM PYTHON SOURCE LINES 108-116

Milling in the Vicsek model 
----------------------------------------

Let us create an instance of the Asynchronuos Vicsek model with a bounded cone of vision and a bounded angular velocity, as introduced in: 

A. Costanzo, C. K. Hemelrijk, Spontaneous emergence of milling (vortex state) in a Vicsek-like model, *J. Phys. D: Appl. Phys.*, 51, 134004



.. GENERATED FROM PYTHON SOURCE LINES 116-134

.. code-block:: default


    N = 10000
    R = 1.
    L = 20.

    nu = 1
    sigma = .02
    kappa = nu/sigma

    c = .175
    angvel_max = .175/nu

    pos = L*torch.rand((N,2)).type(dtype)
    vel = torch.randn(N,2).type(dtype)
    vel = vel/torch.norm(vel,dim=1).reshape((N,1))

    dt = .01








.. GENERATED FROM PYTHON SOURCE LINES 135-136

We add an option to the target

.. GENERATED FROM PYTHON SOURCE LINES 136-152

.. code-block:: default


    target = {"name" : "normalised", "parameters" : {}}
    option = {"bounded_angular_velocity" : {"angvel_max" : angvel_max, "dt" : 1./nu}}

    simu=models.AsynchronousVicsek(pos=pos,vel=vel,
                     v=c,
                     jump_rate=nu,kappa=kappa,
                     interaction_radius=R,
                     box_size=L,
                     vision_angle=math.pi, axis = None,
                     boundary_conditions='periodic',
                     variant=target,
                     options=option,
                     sampling_method='projected_normal')









.. GENERATED FROM PYTHON SOURCE LINES 153-155

Run the simulation over 200 units of time and plot 10 frames. 


.. GENERATED FROM PYTHON SOURCE LINES 155-164

.. code-block:: default


    # sphinx_gallery_thumbnail_number = -1

    frames = [0, 10, 30, 50, 75, 100, 125, 150, 175, 200]

    s = time.time()
    it, op = display_kinetic_particles(simu,frames)
    e = time.time()




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_011.png
          :alt: Asynchronous Vicsek (normalised)  Parameters: N=10000 ; R=1.0 ; Jump Rate=1 ; kappa=50.0 ; v=0.17  Time=0.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_012.png
          :alt: Asynchronous Vicsek (normalised)  Parameters: N=10000 ; R=1.0 ; Jump Rate=1 ; kappa=50.0 ; v=0.17  Time=10.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_013.png
          :alt: Asynchronous Vicsek (normalised)  Parameters: N=10000 ; R=1.0 ; Jump Rate=1 ; kappa=50.0 ; v=0.17  Time=30.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_014.png
          :alt: Asynchronous Vicsek (normalised)  Parameters: N=10000 ; R=1.0 ; Jump Rate=1 ; kappa=50.0 ; v=0.17  Time=50.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_015.png
          :alt: Asynchronous Vicsek (normalised)  Parameters: N=10000 ; R=1.0 ; Jump Rate=1 ; kappa=50.0 ; v=0.17  Time=75.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_016.png
          :alt: Asynchronous Vicsek (normalised)  Parameters: N=10000 ; R=1.0 ; Jump Rate=1 ; kappa=50.0 ; v=0.17  Time=100.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_017.png
          :alt: Asynchronous Vicsek (normalised)  Parameters: N=10000 ; R=1.0 ; Jump Rate=1 ; kappa=50.0 ; v=0.17  Time=125.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_018.png
          :alt: Asynchronous Vicsek (normalised)  Parameters: N=10000 ; R=1.0 ; Jump Rate=1 ; kappa=50.0 ; v=0.17  Time=150.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_019.png
          :alt: Asynchronous Vicsek (normalised)  Parameters: N=10000 ; R=1.0 ; Jump Rate=1 ; kappa=50.0 ; v=0.17  Time=175.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_examples/images/sphx_glr_plot_milling_020.png
          :alt: Asynchronous Vicsek (normalised)  Parameters: N=10000 ; R=1.0 ; Jump Rate=1 ; kappa=50.0 ; v=0.17  Time=200.0
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Progress:0%    Progress:1%    Progress:2%    Progress:3%    Progress:4%    Progress:5%    Progress:6%    Progress:7%    Progress:8%    Progress:9%    Progress:10%    Progress:11%    Progress:12%    Progress:13%    Progress:14%    Progress:15%    Progress:16%    Progress:17%    Progress:18%    Progress:19%    Progress:20%    Progress:21%    Progress:22%    Progress:23%    Progress:24%    Progress:25%    Progress:26%    Progress:27%    Progress:28%    Progress:29%    Progress:30%    Progress:31%    Progress:32%    Progress:33%    Progress:34%    Progress:35%    Progress:36%    Progress:37%    Progress:38%    Progress:39%    Progress:40%    Progress:41%    Progress:42%    Progress:43%    Progress:44%    Progress:45%    Progress:46%    Progress:47%    Progress:48%    Progress:49%    Progress:50%    Progress:51%    Progress:52%    Progress:53%    Progress:54%    Progress:55%    Progress:56%    Progress:57%    Progress:58%    Progress:59%    Progress:60%    Progress:61%    Progress:62%    Progress:63%    Progress:64%    Progress:65%    Progress:66%    Progress:67%    Progress:68%    Progress:69%    Progress:70%    Progress:71%    Progress:72%    Progress:73%    Progress:74%    Progress:75%    Progress:76%    Progress:77%    Progress:78%    Progress:79%    Progress:80%    Progress:81%    Progress:82%    Progress:83%    Progress:84%    Progress:85%    Progress:86%    Progress:87%    Progress:88%    Progress:89%    Progress:90%    Progress:91%    Progress:92%    Progress:93%    Progress:94%    Progress:95%    Progress:96%    Progress:97%    Progress:98%    Progress:99%



.. GENERATED FROM PYTHON SOURCE LINES 165-166

Print the total simulation time and the average time per iteration. 

.. GENERATED FROM PYTHON SOURCE LINES 166-172

.. code-block:: default


    print('Total time: '+str(e-s)+' seconds')
    print('Average time per iteration: '+str((e-s)/simu.iteration)+' seconds')







.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Total time: 69.85851073265076 seconds
    Average time per iteration: 0.003492925536632538 seconds





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  38.151 seconds)


.. _sphx_glr_download__auto_examples_plot_milling.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_milling.py <plot_milling.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_milling.ipynb <plot_milling.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
