
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_tutorials/plot_a_particlesmodels.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__auto_tutorials_plot_a_particlesmodels.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_tutorials_plot_a_particlesmodels.py:


Tutorial 01: Particles and models 
============================================

.. GENERATED FROM PYTHON SOURCE LINES 8-23

A particle system is an instance of one of the classes defined in the module :mod:`sisyphe.particles`. 

Particles 
        The basic class :class:`sisyphe.particles.Particles` defines a particle system by the positions. 

Kinetic particles
        The class :class:`sisyphe.particles.KineticParticles` defines a particle system by the positions and the velocities.

Body-oriented particles.
        The class :class:`sisyphe.particles.BOParticles` defines a particle system in 3D by the positions and the body-orientations which are a rotation matrices in :math:`SO(3)` stored as quaternions. 

A model is a subclass of a particle class. Several examples are defined in the module :mod:`sisyphe.models`. For example, let us create an instance of the Vicsek model :class:`sisyphe.models.Vicsek` which is a subclass of :class:`sisyphe.particles.KineticParticles`. 

First, some standard imports...


.. GENERATED FROM PYTHON SOURCE LINES 23-27

.. code-block:: default


    import time 
    import torch








.. GENERATED FROM PYTHON SOURCE LINES 28-29

If CUDA is available, the computations will be done on the GPU and on the CPU otherwise. The type of the tensors (simple or double precision) are defined by the type of the initial conditions. Here and throughout the documentation, we work with single precision tensors. 

.. GENERATED FROM PYTHON SOURCE LINES 29-33

.. code-block:: default


    use_cuda = torch.cuda.is_available()
    dtype = torch.cuda.FloatTensor if use_cuda else torch.FloatTensor








.. GENERATED FROM PYTHON SOURCE LINES 34-35

We take initially :math:`N` particles uniformly scattered in a box of size :math:`L` with uniformly sampled directions of motion. 

.. GENERATED FROM PYTHON SOURCE LINES 35-43

.. code-block:: default


    N = 10000
    L = 100 

    pos = L*torch.rand((N,2)).type(dtype)
    vel = torch.randn(N,2).type(dtype)
    vel = vel/torch.norm(vel,dim=1).reshape((N,1))








.. GENERATED FROM PYTHON SOURCE LINES 44-45

Then we define the interaction radius :math:`R`, the speed of the particles :math:`c` and the drift and diffusion coefficients, respectively :math:`\nu` and :math:`\sigma`. 

.. GENERATED FROM PYTHON SOURCE LINES 45-51

.. code-block:: default


    R = 5.
    c = 1.
    nu = 3.
    sigma = 1.








.. GENERATED FROM PYTHON SOURCE LINES 52-53

We take a small discretisation time step. 

.. GENERATED FROM PYTHON SOURCE LINES 53-56

.. code-block:: default


    dt = .01








.. GENERATED FROM PYTHON SOURCE LINES 57-58

Finally, we define an instance of the Vicsek model with these parameters. 

.. GENERATED FROM PYTHON SOURCE LINES 58-71

.. code-block:: default


    from sisyphe.models import Vicsek

    simu = Vicsek(
        pos = pos,
        vel = vel, 
        v = c, 
        sigma = sigma, 
        nu = nu, 
        interaction_radius = R,
        box_size = L,
        dt = dt)








.. GENERATED FROM PYTHON SOURCE LINES 72-74

.. note::
        The boundary conditions are periodic by default, see :ref:`tuto_boundaryconditions`.

.. GENERATED FROM PYTHON SOURCE LINES 76-77

So far, nothing has been computed. All the particles are implemented as Python iterators: in order to compute the next time step of the algorithm, we can call the method :meth:`__next__`. This method increments the iteration counter by one and updates all the relevant quantities (positions and velocities) by calling the method :meth:`update() <sisyphe.models.Vicsek.update>` which defines the model. 

.. GENERATED FROM PYTHON SOURCE LINES 77-83

.. code-block:: default


    print("Current iteration: "+ str(simu.iteration))
    simu.__next__()
    print("Current iteration: "+ str(simu.iteration))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Current iteration: 0
    Current iteration: 1




.. GENERATED FROM PYTHON SOURCE LINES 84-85

On a longer time interval, we can use the methods in the module :mod:`sisyphe.display`. For instance, let us fix a list of time frames. 

.. GENERATED FROM PYTHON SOURCE LINES 85-88

.. code-block:: default


    frames = [5., 10., 30., 50., 75., 100]








.. GENERATED FROM PYTHON SOURCE LINES 89-90

Using the method :meth:`sisyphe.display.display_kinetic_particles`, the simulation will run until the last time in the list :data:`frames`. The method also displays a scatter plot of the particle system at each of the times specified in the list and finally compute and plot the order parameter. 

.. GENERATED FROM PYTHON SOURCE LINES 90-97

.. code-block:: default


    from sisyphe.display import display_kinetic_particles

    s = time.time()
    it, op = display_kinetic_particles(simu, frames, order=True)
    e = time.time()




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_a_particlesmodels_001.png
          :alt: Vicsek(normalised)  Parameters: N=10000 ; R=5.0 ; nu=3.0 ; sigma=1.0 ; v=1.0  Time=5.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_a_particlesmodels_002.png
          :alt: Vicsek(normalised)  Parameters: N=10000 ; R=5.0 ; nu=3.0 ; sigma=1.0 ; v=1.0  Time=10.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_a_particlesmodels_003.png
          :alt: Vicsek(normalised)  Parameters: N=10000 ; R=5.0 ; nu=3.0 ; sigma=1.0 ; v=1.0  Time=30.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_a_particlesmodels_004.png
          :alt: Vicsek(normalised)  Parameters: N=10000 ; R=5.0 ; nu=3.0 ; sigma=1.0 ; v=1.0  Time=50.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_a_particlesmodels_005.png
          :alt: Vicsek(normalised)  Parameters: N=10000 ; R=5.0 ; nu=3.0 ; sigma=1.0 ; v=1.0  Time=75.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_a_particlesmodels_006.png
          :alt: Vicsek(normalised)  Parameters: N=10000 ; R=5.0 ; nu=3.0 ; sigma=1.0 ; v=1.0  Time=100.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_a_particlesmodels_007.png
          :alt: plot a particlesmodels
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Progress:0%    Progress:1%    Progress:2%    Progress:3%    Progress:4%    Progress:5%    Progress:6%    Progress:7%    Progress:8%    Progress:9%    Progress:10%    Progress:11%    Progress:12%    Progress:13%    Progress:14%    Progress:15%    Progress:16%    Progress:17%    Progress:18%    Progress:19%    Progress:20%    Progress:21%    Progress:22%    Progress:23%    Progress:24%    Progress:25%    Progress:26%    Progress:27%    Progress:28%    Progress:29%    Progress:30%    Progress:31%    Progress:32%    Progress:33%    Progress:34%    Progress:35%    Progress:36%    Progress:37%    Progress:38%    Progress:39%    Progress:40%    Progress:41%    Progress:42%    Progress:43%    Progress:44%    Progress:45%    Progress:46%    Progress:47%    Progress:48%    Progress:49%    Progress:50%    Progress:51%    Progress:52%    Progress:53%    Progress:54%    Progress:55%    Progress:56%    Progress:57%    Progress:58%    Progress:59%    Progress:60%    Progress:61%    Progress:62%    Progress:63%    Progress:64%    Progress:65%    Progress:66%    Progress:67%    Progress:68%    Progress:69%    Progress:70%    Progress:71%    Progress:72%    Progress:73%    Progress:74%    Progress:75%    Progress:76%    Progress:77%    Progress:78%    Progress:79%    Progress:80%    Progress:81%    Progress:82%    Progress:83%    Progress:84%    Progress:85%    Progress:86%    Progress:87%    Progress:88%    Progress:89%    Progress:90%    Progress:91%    Progress:92%    Progress:93%    Progress:94%    Progress:95%    Progress:96%    Progress:97%    Progress:98%    Progress:99%



.. GENERATED FROM PYTHON SOURCE LINES 98-99

Print the total simulation time and the average time per iteration. 

.. GENERATED FROM PYTHON SOURCE LINES 99-110

.. code-block:: default


    print('Total time: '+str(e-s)+' seconds')
    print('Average time per iteration: '+str((e-s)/simu.iteration)+' seconds')




    
    
    
    
    



.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Total time: 19.33805775642395 seconds
    Average time per iteration: 0.0019336124144009549 seconds





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  22.882 seconds)


.. _sphx_glr_download__auto_tutorials_plot_a_particlesmodels.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_a_particlesmodels.py <plot_a_particlesmodels.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_a_particlesmodels.ipynb <plot_a_particlesmodels.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
