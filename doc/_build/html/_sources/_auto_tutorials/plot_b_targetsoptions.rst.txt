
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_tutorials/plot_b_targetsoptions.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__auto_tutorials_plot_b_targetsoptions.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_tutorials_plot_b_targetsoptions.py:


Tutorial 02: Targets and options
=======================================

Many useful **local averages** (see :ref:`tuto_averages`) are pre-defined and may be directly used in the simulation of new or classical models. This tutorial showcases the basic usage of the **target methods** to simulate the variants of the Vicsek model. 

.. GENERATED FROM PYTHON SOURCE LINES 10-24

An example: variants of the Vicsek model
------------------------------------------

In its most abstract form, the Vicsek model reads: 

.. math:: 

        \mathrm{d}X^i_t = c_0 V^i_t \mathrm{d} t

.. math::

        \mathrm{d}V^i_t = \sigma\mathsf{P}(V^i_t)\circ ( J^i_t \mathrm{d}t + \mathrm{d} B^i_t),

where :math:`c_0` is the speed, :math:`\mathsf{P}(v)` is the orthogonal projection on the orthogonal plane to :math:`v` and :math:`\sigma` is the diffusion coefficient. The drift coefficient :math:`J^i_t` is called a **target**. In synchronous and asynchronous Vicsek models, the target is the center of the sampling distribution. A comparison of classical targets is shown below.

.. GENERATED FROM PYTHON SOURCE LINES 27-29

First, some standard imports...


.. GENERATED FROM PYTHON SOURCE LINES 29-40

.. code-block:: default


    import time 
    import torch
    import pprint
    from matplotlib import pyplot as plt
    from sisyphe.models import Vicsek
    from sisyphe.display import display_kinetic_particles

    use_cuda = torch.cuda.is_available()
    dtype = torch.cuda.FloatTensor if use_cuda else torch.FloatTensor








.. GENERATED FROM PYTHON SOURCE LINES 41-52

The classical non-normalised Vicsek model
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The target is: 

.. math:: 

        J^i_t = \kappa\frac{\sum_{j=1}^N K(|X^j_t-X^i_t|)V^j_t}{|\sum_{j=1}^N K(|X^j_t-X^i_t|)V^j_t|}.

The parameters of the model... 


.. GENERATED FROM PYTHON SOURCE LINES 52-68

.. code-block:: default



    N = 100000
    L = 100 

    pos = L*torch.rand((N,2)).type(dtype)
    vel = torch.randn(N,2).type(dtype)
    vel = vel/torch.norm(vel,dim=1).reshape((N,1))

    R = 3.
    c = 3.
    nu = 5.
    sigma = 1.

    dt = .01








.. GENERATED FROM PYTHON SOURCE LINES 69-71

The choice of the target is implemented in the keyword argument ``variant``. For the classical normalised target, it is given by the following dictionary.


.. GENERATED FROM PYTHON SOURCE LINES 71-88

.. code-block:: default


    variant = {"name" : "normalised", "parameters" : {}}

    simu = Vicsek(
        pos = pos.detach().clone(),
        vel = vel.detach().clone(), 
        v = c, 
        sigma = sigma, 
        nu = nu, 
        interaction_radius = R,
        box_size = L,
        dt = dt,
        variant = variant,
        block_sparse_reduction = True,
        number_of_cells = 40**2)









.. GENERATED FROM PYTHON SOURCE LINES 89-90

Finally run the simulation over 300 units of time.... 

.. GENERATED FROM PYTHON SOURCE LINES 90-97

.. code-block:: default


    frames = [0., 5., 10., 30., 42., 71., 100, 124, 161, 206, 257, 300]

    s = time.time()
    it, op = display_kinetic_particles(simu, frames, order=True)
    e = time.time()




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_001.png
          :alt: Vicsek(normalised)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=0.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_002.png
          :alt: Vicsek(normalised)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=5.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_003.png
          :alt: Vicsek(normalised)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=10.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_004.png
          :alt: Vicsek(normalised)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=30.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_005.png
          :alt: Vicsek(normalised)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=42.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_006.png
          :alt: Vicsek(normalised)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=71.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_007.png
          :alt: Vicsek(normalised)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=100.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_008.png
          :alt: Vicsek(normalised)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=124.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_009.png
          :alt: Vicsek(normalised)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=161.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_010.png
          :alt: Vicsek(normalised)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=206.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_011.png
          :alt: Vicsek(normalised)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=257.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_012.png
          :alt: Vicsek(normalised)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=300.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_013.png
          :alt: plot b targetsoptions
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Progress:0%    Progress:1%    Progress:2%    Progress:3%    Progress:4%    Progress:5%    Progress:6%    Progress:7%    Progress:8%    Progress:9%    Progress:10%    Progress:11%    Progress:12%    Progress:13%    Progress:14%    Progress:15%    Progress:16%    Progress:17%    Progress:18%    Progress:19%    Progress:20%    Progress:21%    Progress:22%    Progress:23%    Progress:24%    Progress:25%    Progress:26%    Progress:27%    Progress:28%    Progress:29%    Progress:30%    Progress:31%    Progress:32%    Progress:33%    Progress:34%    Progress:35%    Progress:36%    Progress:37%    Progress:38%    Progress:39%    Progress:40%    Progress:41%    Progress:42%    Progress:43%    Progress:44%    Progress:45%    Progress:46%    Progress:47%    Progress:48%    Progress:49%    Progress:50%    Progress:51%    Progress:52%    Progress:53%    Progress:54%    Progress:55%    Progress:56%    Progress:57%    Progress:58%    Progress:59%    Progress:60%    Progress:61%    Progress:62%    Progress:63%    Progress:64%    Progress:65%    Progress:66%    Progress:67%    Progress:68%    Progress:69%    Progress:70%    Progress:71%    Progress:72%    Progress:73%    Progress:74%    Progress:75%    Progress:76%    Progress:77%    Progress:78%    Progress:79%    Progress:80%    Progress:81%    Progress:82%    Progress:83%    Progress:84%    Progress:85%    Progress:86%    Progress:87%    Progress:88%    Progress:89%    Progress:90%    Progress:91%    Progress:92%    Progress:93%    Progress:94%    Progress:95%    Progress:96%    Progress:97%    Progress:98%    Progress:99%



.. GENERATED FROM PYTHON SOURCE LINES 98-99

Print the total simulation time and the average time per iteration. 

.. GENERATED FROM PYTHON SOURCE LINES 99-103

.. code-block:: default


    print('Total time: '+str(e-s)+' seconds')
    print('Average time per iteration: '+str((e-s)/simu.iteration)+' seconds')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Total time: 140.3169023990631 seconds
    Average time per iteration: 0.00467723007996877 seconds




.. GENERATED FROM PYTHON SOURCE LINES 104-105

Plot the histogram of the angles of the directions of motion. 

.. GENERATED FROM PYTHON SOURCE LINES 105-112

.. code-block:: default


    angle = torch.atan2(simu.vel[:,1],simu.vel[:,0])
    angle = angle.cpu().numpy()
    h = plt.hist(angle, bins=1000)
    plt.xlabel(angle)
    plt.show()




.. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_014.png
    :alt: plot b targetsoptions
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/and18/.local/lib/python3.8/site-packages/matplotlib/text.py:1215: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison
      if s != self._text:




.. GENERATED FROM PYTHON SOURCE LINES 113-114

After an initial clustering phase, the system self-organizes into a uniform flock. 

.. GENERATED FROM PYTHON SOURCE LINES 116-126

Non-normalised Vicsek model
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The target is: 

.. math:: 

        J^i_t = \frac{\frac{1}{N}\sum_{j=1}^N K(|X^j_t-X^i_t|)V^j_t}{\frac{1}{\kappa}+\frac{1}{\kappa_0}|\frac{1}{N}\sum_{j=1}^N K(|X^j_t-X^i_t|)V^j_t|}.

Define the corresponding dictionary...

.. GENERATED FROM PYTHON SOURCE LINES 126-145

.. code-block:: default


    kappa_0 = 15.

    variant = {"name" : "max_kappa", "parameters" : {"kappa_max" : kappa_0}}

    simu = Vicsek(
        pos = pos.detach().clone(),
        vel = vel.detach().clone(), 
        v = c, 
        sigma = sigma, 
        nu = nu, 
        interaction_radius = R,
        box_size = L,
        dt = dt,
        variant = variant,
        block_sparse_reduction = True,
        number_of_cells = 40**2)









.. GENERATED FROM PYTHON SOURCE LINES 146-147

Finally run the simulation over 300 units of time.... 

.. GENERATED FROM PYTHON SOURCE LINES 147-154

.. code-block:: default


    frames = [0., 5., 10., 30., 42., 71., 100, 124, 161, 206, 257, 300]

    s = time.time()
    it, op = display_kinetic_particles(simu, frames, order=True)
    e = time.time()




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_015.png
          :alt: Vicsek(max_kappa)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=0.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_016.png
          :alt: Vicsek(max_kappa)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=5.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_017.png
          :alt: Vicsek(max_kappa)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=10.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_018.png
          :alt: Vicsek(max_kappa)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=30.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_019.png
          :alt: Vicsek(max_kappa)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=42.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_020.png
          :alt: Vicsek(max_kappa)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=71.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_021.png
          :alt: Vicsek(max_kappa)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=100.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_022.png
          :alt: Vicsek(max_kappa)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=124.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_023.png
          :alt: Vicsek(max_kappa)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=161.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_024.png
          :alt: Vicsek(max_kappa)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=206.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_025.png
          :alt: Vicsek(max_kappa)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=257.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_026.png
          :alt: Vicsek(max_kappa)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=300.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_027.png
          :alt: plot b targetsoptions
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Progress:0%    Progress:1%    Progress:2%    Progress:3%    Progress:4%    Progress:5%    Progress:6%    Progress:7%    Progress:8%    Progress:9%    Progress:10%    Progress:11%    Progress:12%    Progress:13%    Progress:14%    Progress:15%    Progress:16%    Progress:17%    Progress:18%    Progress:19%    Progress:20%    Progress:21%    Progress:22%    Progress:23%    Progress:24%    Progress:25%    Progress:26%    Progress:27%    Progress:28%    Progress:29%    Progress:30%    Progress:31%    Progress:32%    Progress:33%    Progress:34%    Progress:35%    Progress:36%    Progress:37%    Progress:38%    Progress:39%    Progress:40%    Progress:41%    Progress:42%    Progress:43%    Progress:44%    Progress:45%    Progress:46%    Progress:47%    Progress:48%    Progress:49%    Progress:50%    Progress:51%    Progress:52%    Progress:53%    Progress:54%    Progress:55%    Progress:56%    Progress:57%    Progress:58%    Progress:59%    Progress:60%    Progress:61%    Progress:62%    Progress:63%    Progress:64%    Progress:65%    Progress:66%    Progress:67%    Progress:68%    Progress:69%    Progress:70%    Progress:71%    Progress:72%    Progress:73%    Progress:74%    Progress:75%    Progress:76%    Progress:77%    Progress:78%    Progress:79%    Progress:80%    Progress:81%    Progress:82%    Progress:83%    Progress:84%    Progress:85%    Progress:86%    Progress:87%    Progress:88%    Progress:89%    Progress:90%    Progress:91%    Progress:92%    Progress:93%    Progress:94%    Progress:95%    Progress:96%    Progress:97%    Progress:98%    Progress:99%



.. GENERATED FROM PYTHON SOURCE LINES 155-156

Print the total simulation time and the average time per iteration. 

.. GENERATED FROM PYTHON SOURCE LINES 156-160

.. code-block:: default


    print('Total time: '+str(e-s)+' seconds')
    print('Average time per iteration: '+str((e-s)/simu.iteration)+' seconds')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Total time: 157.864102602005 seconds
    Average time per iteration: 0.005262136753400167 seconds




.. GENERATED FROM PYTHON SOURCE LINES 161-162

Plot the histogram of the angles of the directions of motion. 

.. GENERATED FROM PYTHON SOURCE LINES 162-169

.. code-block:: default


    angle = torch.atan2(simu.vel[:,1],simu.vel[:,0])
    angle = angle.cpu().numpy()
    h = plt.hist(angle, bins=1000)
    plt.xlabel(angle)
    plt.show()




.. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_028.png
    :alt: plot b targetsoptions
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/and18/.local/lib/python3.8/site-packages/matplotlib/text.py:1215: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison
      if s != self._text:




.. GENERATED FROM PYTHON SOURCE LINES 170-171

The system self-organizes into a strongly clustered flock with band-like structures. 

.. GENERATED FROM PYTHON SOURCE LINES 174-189

Nematic Vicsek model 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The target is: 

.. math:: 

        J^i_t = \kappa (V^i_t\cdot \overline{\Omega}^i_t)\overline{\Omega}^i_t,

where :math:`\overline{\Omega}^i_t` is any unit eigenvector associated to the maximal eigenvalue of the average Q-tensor:

.. math::

        Q^i_t = \frac{1}{N}\sum_{j=1}^N K(|X^j_t-X^i_t|){\left(V^j_t\otimes V^j_t - \frac{1}{d} I_d\right)}.

Define the corresponding dictionary...

.. GENERATED FROM PYTHON SOURCE LINES 189-205

.. code-block:: default


    variant = {"name" : "nematic", "parameters" : {}}

    simu = Vicsek(
        pos = pos.detach().clone(),
        vel = vel.detach().clone(), 
        v = c, 
        sigma = sigma, 
        nu = nu, 
        interaction_radius = R,
        box_size = L,
        dt = dt,
        variant = variant,
        block_sparse_reduction = True, 
        number_of_cells = 40**2)








.. GENERATED FROM PYTHON SOURCE LINES 206-207

Finally run the simulation over 100 units of time... The color code indicates the angle of the direction of motion between :math:`-\pi` and :math:`\pi`. 

.. GENERATED FROM PYTHON SOURCE LINES 207-214

.. code-block:: default


    frames = [0., 5., 10., 30., 42., 71., 100]

    s = time.time()
    it, op = display_kinetic_particles(simu, frames, order=True, color=True)
    e = time.time()




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_029.png
          :alt: Vicsek(nematic)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=0.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_030.png
          :alt: Vicsek(nematic)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=5.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_031.png
          :alt: Vicsek(nematic)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=10.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_032.png
          :alt: Vicsek(nematic)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=30.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_033.png
          :alt: Vicsek(nematic)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=42.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_034.png
          :alt: Vicsek(nematic)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=71.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_035.png
          :alt: Vicsek(nematic)  Parameters: N=100000 ; R=3.0 ; nu=5.0 ; sigma=1.0 ; v=3.0  Time=100.0
          :class: sphx-glr-multi-img

    *

      .. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_036.png
          :alt: plot b targetsoptions
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Progress:0%    Progress:1%    Progress:2%    Progress:3%    Progress:4%    Progress:5%    Progress:6%    Progress:7%    Progress:8%    Progress:9%    Progress:10%    Progress:11%    Progress:12%    Progress:13%    Progress:14%    Progress:15%    Progress:16%    Progress:17%    Progress:18%    Progress:19%    Progress:20%    Progress:21%    Progress:22%    Progress:23%    Progress:24%    Progress:25%    Progress:26%    Progress:27%    Progress:28%    Progress:29%    Progress:30%    Progress:31%    Progress:32%    Progress:33%    Progress:34%    Progress:35%    Progress:36%    Progress:37%    Progress:38%    Progress:39%    Progress:40%    Progress:41%    Progress:42%    Progress:43%    Progress:44%    Progress:45%    Progress:46%    Progress:47%    Progress:48%    Progress:49%    Progress:50%    Progress:51%    Progress:52%    Progress:53%    Progress:54%    Progress:55%    Progress:56%    Progress:57%    Progress:58%    Progress:59%    Progress:60%    Progress:61%    Progress:62%    Progress:63%    Progress:64%    Progress:65%    Progress:66%    Progress:67%    Progress:68%    Progress:69%    Progress:70%    Progress:71%    Progress:72%    Progress:73%    Progress:74%    Progress:75%    Progress:76%    Progress:77%    Progress:78%    Progress:79%    Progress:80%    Progress:81%    Progress:82%    Progress:83%    Progress:84%    Progress:85%    Progress:86%    Progress:87%    Progress:88%    Progress:89%    Progress:90%    Progress:91%    Progress:92%    Progress:93%    Progress:94%    Progress:95%    Progress:96%    Progress:97%    Progress:98%    Progress:99%



.. GENERATED FROM PYTHON SOURCE LINES 215-216

Print the total simulation time and the average time per iteration. 

.. GENERATED FROM PYTHON SOURCE LINES 216-220

.. code-block:: default


    print('Total time: '+str(e-s)+' seconds')
    print('Average time per iteration: '+str((e-s)/simu.iteration)+' seconds')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Total time: 56.27582669258118 seconds
    Average time per iteration: 0.005627582669258118 seconds




.. GENERATED FROM PYTHON SOURCE LINES 221-222

Plot the histogram of the angles of the directions of motion. 

.. GENERATED FROM PYTHON SOURCE LINES 222-231

.. code-block:: default


    # sphinx_gallery_thumbnail_number = -1

    angle = torch.atan2(simu.vel[:,1],simu.vel[:,0])
    angle = angle.cpu().numpy()
    h = plt.hist(angle, bins=1000)
    plt.xlabel(angle)
    plt.show()




.. image:: /_auto_tutorials/images/sphx_glr_plot_b_targetsoptions_037.png
    :alt: plot b targetsoptions
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/and18/.local/lib/python3.8/site-packages/matplotlib/text.py:1215: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison
      if s != self._text:




.. GENERATED FROM PYTHON SOURCE LINES 232-233

There are two modes separated by an angle :math:`\pi` which indicates that two groups of equal size are moving in opposite direction. This a *nematic flock*. 

.. GENERATED FROM PYTHON SOURCE LINES 236-240

The target dictionary 
--------------------------------

Several other targets are implemented. The complete list of available targets can be found in the **dictionary of targets** :attr:`target_method <sisyphe.particles.Particles.target_method>`.

.. GENERATED FROM PYTHON SOURCE LINES 240-243

.. code-block:: default


    pprint.pprint(simu.target_method)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'max_kappa': <bound method KineticParticles.max_kappa of <sisyphe.models.Vicsek object at 0x7fbd9357d670>>,
     'mean_field': <bound method KineticParticles.mean_field of <sisyphe.models.Vicsek object at 0x7fbd9357d670>>,
     'morse': <bound method Particles.morse_target of <sisyphe.models.Vicsek object at 0x7fbd9357d670>>,
     'motsch_tadmor': <bound method KineticParticles.motsch_tadmor of <sisyphe.models.Vicsek object at 0x7fbd9357d670>>,
     'nematic': <bound method KineticParticles.nematic of <sisyphe.models.Vicsek object at 0x7fbd9357d670>>,
     'normalised': <bound method KineticParticles.normalised of <sisyphe.models.Vicsek object at 0x7fbd9357d670>>,
     'overlapping_repulsion': <bound method Particles.overlapping_repulsion_target of <sisyphe.models.Vicsek object at 0x7fbd9357d670>>,
     'quadratic_potential': <bound method Particles.quadratic_potential_target of <sisyphe.models.Vicsek object at 0x7fbd9357d670>>}




.. GENERATED FROM PYTHON SOURCE LINES 244-245

Custom targets can be added to the dictionary of targets using the method :meth:`add_target_method() <sisyphe.particles.Particles.add_target_method>`. Then a target can be readily used in a simulation using the method :meth:`compute_target() <sisyphe.particles.Particles.compute_target>`. 

.. GENERATED FROM PYTHON SOURCE LINES 248-252

Options
---------------

Customized targets can also be defined by applying an **option** which modifies an existing target. See :ref:`examplemill`.  


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  21.321 seconds)


.. _sphx_glr_download__auto_tutorials_plot_b_targetsoptions.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_b_targetsoptions.py <plot_b_targetsoptions.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_b_targetsoptions.ipynb <plot_b_targetsoptions.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
